Een mapping strategie is om een twobit sequentie te gebruiken als
index voor opslag van posities. Probleem is dat lange k-mers veel
werkgeheugen gebruiken en dat korte k-mers vaak niet uniek genoeg
zijn. Dit document beschrijft strategieen om deze beperkingen te
omzeilen.

Sla niet elke kmer op, kies enkele met wat regels op basis van de
sequentie. Het kan dat je aan een kmer binnen het venster van een
read genoeg hebt om de positie te bepalen, en overigen redundant
zijn. Van de twee strands zou ook een moeten volstaan. Hiervoor
dient de xmer. De x staat voor extensie en de xor hash operaties.

Een xmer is de kmer van een template of reverse complement strand
of een bitwise complement van een van de twee. Orientatie wordt
bepaald door welke van de twee de kleinste waarde heeft. De index
wordt deze sequentie, tenzij de hoogste bit van de kmer is
gezet, anders het bitwise complement. Een index met 1 bit minder
betekent 2x minder ruimte nodig voor de opslag.

Na bitwise complementatie is de index niet meer het kleinste van
de twee, zo moet he zijn, want deze index komt niet overeen met
een andere index - na het kiezen van de andere strand en dan de
bitwise complement nemen namelijk wel. Een uitzondering zijn de
palindrome kmers, daarbij wordt gekeken naar de staat van de
eerste bit.

Onafhankelijk van de strand wordt zo dezelfde xmer gekozen. Ook
bij palidrome kmers die voor beide strands resulteren in dezelfde
xmer. Hierbij wordt er een strand gekozen op basis van de staat
vand de eerste bit.

De opslag van posities en indices is beperkt tot bepaalde xmers.
Binnen een venster, de readlengte, wordt gezocht naar de minimale
xmer als index voor opslag van strand, positie, wederkeren en de
extensie. Extensie is een oplossing voor alsnog herhalende xmers,
die nul blijft zolang de xmer niet eerder voorkwam op het genoom.

In eerste instantie itereren we over een contig, als twobits, en
bouwen/updaten de template en reverse complement kmers benodigd
om de xmer te bepalen. De genomische twobit sequentie wordt ook
gelijk geschreven, evenals de genomische coordinaten voor contigs
en N-stretches (ambigue referentie sequentie) en hun lengte.

Als voor een readlengte de minimale xmer al eerder op het genoom
voorkwam, zit er informatie opgeslagen. Een botsing. De nieuwe en
opgeslagen informatie wordt vergeleken, die hoogste extensie of
de eerst gezette informatie krijgt voorrang. Bij gelijke extensie
wordt er wel nog een duplicatie bit gezet. Voor de niet meer
opgeslagen informatie volgt er een oplossing.

Met hulp van de genomisch opgeslagen twobit sequentie wordt voor
de in limbo positie het venster gerepliceerd. Vervolgens wordt de
extensie verhoogd en binnen de readlengte hashes van twee xmers
gemaakt, op afstand van elkaar, afhankelijk van de extensie.
Hieruit kiezen we een hash als index voor de opslag van de
informatie, extensie plus een.

Na extensie is de gekozen hash niet meer strikt het minimum, maar
worden de hoogste bits van de xmer hashes gemoduleerd alvorens te
zoeken naar een minimum. Dit helpt botsingen voorkomen. Met een
xmer minimum worden data vooral is opgeslagen in het eerste stuk
van de positie array. Na modulatie komt het optimum anders uit.


Indien, na extensie, de verkregen hash index nog niet uniek is,
groeit de extensie verder, met een andere hashing en optimum van
xmers als index, totdat of een lege index, of vervangbare - met
minder extensie - gevonden wordt of totdat de maximale extensie,
maximale readlengte of de contig extensie niet toestaat.

Als twee xmers binnen de scope van een readlengte vallen krijgt
wordt de xmer met hogere positie genegeerd en verlengt de scope
vanaf de tweede xmer met de xmer positie min kmerlen. Hiermee
vergroot het bereik voo


soms geeft hashen van kmers met extensie een zelfde kmer als
met zonder, of met minder extensie. Bijvoorbeeld een sequentie
met herhaling van CCCC.. extensie zou een bitmask om te flippen
kunnen krijgen. aan de andere kant blijven zulke sequenties
toch wel dubieus.


Wijziging van het optimum per extensie is om index botsingen te
voorkomen. De minimale xmer, gekozen voor de nulde extensie nul
resulteert erin dat informatie vooral is opgeslagen in het eerste
stuk van de positie array. Na de extensie worden de hoogste bits
van xmer hashes gemoduleerd alvoens te zoeken naar een minimum,
opdat er andere keuzes uitrollen.


Een index zonder extensie is een xmer, met als bijbehorende
positie de twobit positie na de xmer. Een extended xmer is een xor
hash van de xmer zonder en een xmer aangepast voor de extensie. De
bijbehorende positie is het gemiddelde van de twee kmer posities.

Toekomstmuziek:
Er zijn verschillende strategieen te bedenken voor extensie en de
hashing als gevolg daarvan. Het zou mogelijk zijn om per extensie
verschillende basen in de hash niet mee te nemen. dit zou hett
misschien eenvoudiger maken mismatches, etc. te herkennen.
Ook kan hiermee de afstand tussen gehashte xmers kleiner blijven.
Duplicates worden hiermee wel minder opgelost, maar misschien
dat een niet overlappende secondary index daarvoor uitkomst kan
bieden.

Hashen van xmers dichter bij elkaar maakt het mogelijk een
Ook wordt door het wijzigen van 


Met een kmerlen 16 zijn er de extensies 2, 4, 8, 16..(16 x n), met  <= waarom niet midpoint?
n tot hoever valt binnen de readlengte.                             <= TODO: nu nog alleen pow2

Behalve multimappers wordt alle positie informatie in dezelfde
array opgeslagen. Voor extensie nul wordt de minimale xmer als
index gebruikt en dus zit deze informatie vooral opgeslagen in het
eerste stuk van de array. Om index botsing te voorkomen zoekt elke
extensie een ander optimum, de hashes worden in de hoogste bits
gemoduleerd, met bitgewijs gespiegelde extensie, alvorens het
zoeken naar een minimum.

De regios waarbinnen vensters geen resolutie hebben worden           <= TODO
bijgehouden. Na afloop worden voor nabijgelegen vensters de re

Als een read geen extended kmer heeft met resolutie, worden in paired-end
de minima van de twee mates met elkaar gehashed. Als de kmer zonder extensie
niet werkt wordt de kmer hash met extensie 2 gebruikt voor beide reads om te
hashen, etc. etc.


Als na het rebuilden van een scope behorend bij een opgeslagen positie,
de kmer hash extend wordt kan de minimale hash out of scope gaan,
voor latere rotaties. dan moeten die ook worden geextend met een eigen minimum.
(wat hiermee bedoeld wordt snap ik niet helemaal - klinkt als uitleg voor een corner-case)


