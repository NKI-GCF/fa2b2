
Een xmer is de kmer van een template of reverse complement strand
of een bitwise complement van een van de twee. Strand keuze wordt
bepaald door te kijken naar de eerste bit die verschilt tussen de
twee. De kmer met deze bit gezet wordt de xmer, tenzij de hoogste
bit van deze kmer gezet is, dan het bitwise complement ervan.

De xmer die bitwise gecomplementeerd is kan niet overeenkomen met
een kmer die als xmer gekozen zou worden, want deze kmer heeft de
eerste bit die verschilt met zijn reverse complement niet gezet.
Uitzondering zijn palindrome kmers. Hierbij wordt er gekeken naar
de eerste bit, en wordt vergelijkbaar bitwise gecomplementeerd.

Binnen een venster, de gegeven readlengte, wordt gezocht naar de
minimale xmer als index voor opslag van strand, positie, extensie
en prioriteit. Extensie blijft nul zolang de xmer niet eerder is
voorgekomen op het genoom. De prioriteit, de hoogste bit, is
standaard gezet.

In eerste instantie itereren we over de contig, als twobits, en
bouwen/updaten een template en reverse complement kmers om de xmer
te beplanen. De genomische twobit sequentie wordt ook gelijk
opgeslagen, evenals de genomische coordinaten voor contigs en N-
stretches met hun lengte.

Als voor een readlengte het xmer minimum niet uniek op het genoom
is, zit er al informatie opgeslagen voor deze index. Nieuwe en
opgeslagen informatie wordt vergeleken, de informatie met de
hoogste extensie komt/blijft staan. Indien extensie gelijk is komt
er een blacklisting te staan voor deze extensie: Een nul positie
met deze extensie plus een. Voor de nu niet opgeslagen informatie
volgt er een oplossing:

Met hulp van de genomisch opgeslagen twobit sequentie wordt voor
de in limbo positie het venster gerepliceerd. Vervolgens wordt de
extensie verhoogd en maken we binnen de readlangte hashes van twee
xmers, op een afstand van elkaar, afhankelijk van de extensie.
Hieruit kiezen we een hash als index voor de opslag van de
informatie, extensie plus een. Dit keer is de gekozen hash niet
het minimum, maar een optimum afhankelijk van de extensie.

Indien na extensie de verkregen hash index nog niet uniek is,
groeit de extensie verder, met een hash optimum van xmers met nog
meer afstand ertussen als index, totdat of een ongebruikte of
vervangbare index, met lagere extensie, gevonden wordt of totdat
de readlengte meer extensie niet toestaat, en er een blacklisting
voor de hoogste extensie is komen te staan. De positie informatie
daarbij achtergebleven wordt elders opgeslagen.                     <= niet 100% zeker over `elders'

Een index zonder extensie, is een xmer, met als bijbehorende
positie de twobit positie na de xmer. Een extended kmer is een xor
hash van de kmer voor extensie en de kmer na de extensie. De
bijbehorende positie is het gemiddelde van de twee kmer posities.
Met een kmerlen 16 zijn er de extensies 2, 4, 8, 16..(16 x n), met  <= waarom niet midpoint?
n tot hoever valt binnen de readlengte.                             <= TODO: nu nog alleen pow2

Behalve multimappers wordt alle positie informatie in dezelfde
array opgeslagen. Voor extensie nul wordt de minimale xmer als
index gebruikt en dus zit deze informatie vooral opgeslagen in het
eerste stuk van de array. Om index botsing te voorkomen zoekt elke
extensie een ander optimum, de hashes worden in de hoogste bits
gemoduleerd, met bitgewijs gespiegelde extensie, alvorens het
zoeken naar een minimum.

De regios waarbinnen vensters geen resolutie hebben worden           <= TODO
bijgehouden. Na afloop worden voor nabijgelegen vensters de re

Als een read geen extended kmer heeft met resolutie, worden in paired-end
de minima van de twee mates met elkaar gehashed. Als de kmer zonder extensie
niet werkt wordt de kmer hash met extensie 2 gebruikt voor beide reads om te
hashen, etc. etc.


Als een kmer extend wordt na rebuilden occurance, kan de minimale
hash niet meer in scope zijn voor latere rotaties. dan moeten die
ook worden geextend met een eigen minimum.



